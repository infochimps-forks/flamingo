#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'flamingo'
require 'optparse'

puts "Starting flamingod #{Flamingo::VERSION}"

begin
  options = {:daemonize => nil, :config => nil}

  opts = OptionParser.new do |opts|
    opts.banner = <<-EOF
  Usage:
    flamingod [<options>]
  EOF

    opts.on("-cCONFIG", "--config-file=CONFIG", "Configuration File") do |x|
      options[:config_file] = x
    end

    opts.on("-d", "--daemonize", "Run in Background (Daemonize)") do |x|
      options[:daemonize] = true
    end

    opts.on("-b", "--background", "Run in Background (Daemonize)") do |x|
      options[:daemonize] = true
    end

    opts.on("-f", "--foreground", "Run in Foreground (default)") do |x|
      options[:daemonize] = nil
    end

    opts.on("-pPID_FILE", "--pid-file=PID_FILE", "PID File (only when daemonized)") do |x|
      options[:pid_file] = x
    end

  end

  opts.parse!

  Flamingo.configure!(options[:config_file])
  if options[:pid_file]
    Flamingo.config.pid_file = File.expand_path(options[:pid_file])
  end

rescue => e
  $stderr.puts "Could not start: #{e.message}"
  exit(-1)
end

flamingod = Flamingo::Daemon::Flamingod.new 
if options[:daemonize]
  begin
    pid = flamingod.run_as_daemon()
    puts "flamingod process #{pid} started" 
  rescue => e
    $stderr.puts "Could not start: #{e.message}"
    exit(-2)
  end
else
  flamingod.run()
end